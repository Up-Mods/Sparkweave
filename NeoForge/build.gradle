plugins {
	id 'idea'
	alias neoforge.plugins.neogradle
}

dependencies {
	implementation neoforge.neoforge

	compileOnly project(":Common")

	testmodImplementation sourceSets.main.output
	testmodCompileOnly project(path: ":Common", configuration: "testmod")

//	implementation libs.resourcefulconfig.neoforge

	implementation libs.appdirs
	jarJar(libs.appdirs) {
		transitive = false
		jarJar.ranged(it, "[${libs.versions.appdirs.get()},)")
	}

//	compileOnly "${libs.emi.neoforge.get()}:api"
//	runtimeOnly libs.emi.neoforge
}

jar {
	archiveClassifier.set("slim")
}

tasks.jarJar.configure {
	archiveClassifier.set('')
}

// Automatically enable neoforge AccessTransformers if the file exists
// This location is hardcoded in FML and can not be changed.
// https://github.com/neoforged/FancyModLoader/blob/a952595eaaddd571fbc53f43847680b00894e0c1/loader/src/main/java/net/neoforged/fml/loading/moddiscovery/ModFile.java#L118
if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
	minecraft.accessTransformers.file file('src/main/resources/META-INF/accesstransformer.cfg')
}

subsystems {
	parchment {
		minecraftVersion = "1.20.6" //  //TODO fix when parchment releases for 1.21
		mappingsVersion = libs.versions.parchment.get()
	}
}

sourceSets.testmod.runs.modIdentifier "testMod"
runs {
	configureEach {
		systemProperty 'forge.logging.markers', 'REGISTRIES'
		systemProperty 'forge.logging.console.level', 'debug'

		dependencies {
			runtime(libs.appdirs.get())
		}
	}

	client {
		modSource project.sourceSets.main
		workingDirectory project.file('run')
		systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id

		if (project.hasProperty('mc_uuid')) {
			programArguments.add("--uuid=${project.findProperty('mc_uuid')}")
		}

		if (project.hasProperty('mc_username')) {
			programArguments.add("--username=${project.findProperty('mc_username')}")
		}

		if (project.hasProperty('mc_java_agent_path')) {
			jvmArgument("-javaagent:${project.findProperty('mc_java_agent_path')}")
		}
	}

	server {
		modSource project.sourceSets.main
		workingDirectory project.file('run')

		programArguments.add('nogui')
		systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
	}

	testmodClient {
		configure runTypes.client
		modSource project.sourceSets.testmod
		modSource project.sourceSets.main
		workingDirectory project.file('run/testmod')
		systemProperty 'neoforge.enabledGameTestNamespaces', "${project.mod_id}_testmod"

		if (project.hasProperty('mc_uuid')) {
			programArguments.add("--uuid=${project.findProperty('mc_uuid')}")
		}

		if (project.hasProperty('mc_username')) {
			programArguments.add("--username=${project.findProperty('mc_username')}")
		}

		if (project.hasProperty('mc_java_agent_path')) {
			jvmArgument("-javaagent:${project.findProperty('mc_java_agent_path')}")
		}
	}

	data {
		modSource project.sourceSets.main
		workingDirectory project.file('run')
		// this must be strings ONLY, or neogradle will not generate run configs at all!
		programArguments.addAll('--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').absolutePath, '--existing', file('src/main/resources/').absolutePath)
	}
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

tasks.named("compileJava", JavaCompile) {
	source(project(":Common").sourceSets.main.allSource)
}

tasks.named("javadoc", Javadoc) {
	source(project(":Common").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
	from(project(":Common").sourceSets.main.allSource)
}

tasks.named("compileTestmodJava", JavaCompile) {
	source(project(":Common").sourceSets.testmod.allJava)
}

processResources {
	from project(":Common").sourceSets.main.resources
}

processTestmodResources {
	from project(":Common").sourceSets.testmod.resources
}
