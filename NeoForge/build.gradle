plugins {
	id 'idea'
	alias neoforge.plugins.moddevgradle
}

dependencies {
	compileOnly project(":Common")

	testmodImplementation sourceSets.main.output
	testmodCompileOnly project(path: ":Common", configuration: "testmod")

//	implementation libs.resourcefulconfig.neoforge

	implementation libs.appdirs
	additionalRuntimeClasspath libs.appdirs.get()
	jarJar(libs.appdirs) {
		transitive = false
		version {
			strictly "[${libs.versions.appdirs.get()},)"
			prefer libs.versions.appdirs.get()
		}
	}

	compileOnly "${libs.emi.neoforge.get()}:api"
//	runtimeOnly libs.emi.neoforge
}

neoForge {
	version = neoforge.versions.neoforge.get()

	parchment {
		mappingsVersion = libs.versions.parchment.asProvider().get()
		minecraftVersion = libs.versions.parchment.minecraft.get()
	}

	runs {
		configureEach {
			systemProperty 'forge.logging.markers', 'REGISTRIES'
			systemProperty 'forge.logging.console.level', 'debug'
		}

		client {
			client()
			gameDirectory = project.file('run')
			systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id

			sourceSet = sourceSets.main

			if (project.hasProperty('mc_uuid')) {
				programArguments.add("--uuid=${project.findProperty('mc_uuid')}")
			}

			if (project.hasProperty('mc_username')) {
				programArguments.add("--username=${project.findProperty('mc_username')}")
			}

			if (project.hasProperty('mc_java_agent_path')) {
				jvmArgument("-javaagent:${project.findProperty('mc_java_agent_path')}")
			}
		}

		server {
			server()
			gameDirectory = project.file('run')
			programArguments.add('--nogui')
			systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
		}

		testmodClient {
			client()
			gameDirectory = project.file('run/testmod')
			systemProperty 'neoforge.enabledGameTestNamespaces', "${project.mod_id}_testmod"

			sourceSet = sourceSets.testmod

			if (project.hasProperty('mc_uuid')) {
				programArguments.add("--uuid=${project.findProperty('mc_uuid')}")
			}

			if (project.hasProperty('mc_username')) {
				programArguments.add("--username=${project.findProperty('mc_username')}")
			}

			if (project.hasProperty('mc_java_agent_path')) {
				jvmArgument("-javaagent:${project.findProperty('mc_java_agent_path')}")
			}
		}

		data {
			data()
			gameDirectory = project.file('run')
			// this must be strings ONLY, or neogradle will not generate run configs at all!
			programArguments.addAll('--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').absolutePath, '--existing', file('src/main/resources/').absolutePath)
		}
	}

	mods {
		// define mod <-> source bindings
		// these are used to tell the game which sources are for which mod
		// mostly optional in a single mod project
		// but multi mod projects should define one per mod
		"${mod_id}" {
			sourceSet(sourceSets.main)
			sourceSet(project(":Common").sourceSets.main)
		}

		"${project.mod_id}_testmod" {
			sourceSet(sourceSets.testmod)
			sourceSet(project(":Common").sourceSets.testmod)
		}
	}
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

tasks.named("compileJava", JavaCompile) {
	source(project(":Common").sourceSets.main.allSource)
}

tasks.named("javadoc", Javadoc) {
	source(project(":Common").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
	from(project(":Common").sourceSets.main.allSource)
}

tasks.named("compileTestmodJava", JavaCompile) {
	source(project(":Common").sourceSets.testmod.allJava)
}

processResources {
	from project(":Common").sourceSets.main.resources
}

processTestmodResources {
	from project(":Common").sourceSets.testmod.resources
}
