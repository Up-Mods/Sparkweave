plugins {
	alias fabric.plugins.fabric.loom
}

dependencies {
	minecraft libs.minecraft
	mappings(loom.layered {
		it.officialMojangMappings()
		it.parchment("${libs.parchment.mappings.get()}@zip")
	})

	modImplementation fabric.fabric.loader
	modImplementation (fabric.fabric.api) {
		exclude group: "net.fabricmc", module: "fabric-loader"
	}

	compileOnly project(":Common")

	testmodImplementation sourceSets.main.output
	testmodCompileOnly project(path: ":Common", configuration: "testmod")

//	modImplementation (libs.resourcefulconfig.fabric) {
//		transitive = false
//	}

	implementation libs.appdirs
	include libs.appdirs

	modCompileOnly ("${libs.emi.fabric.get()}:api") {
		transitive = false
	}
//	modLocalRuntime (libs.emi.fabric) {
//		transitive = false
//	}

	modCompileOnly (fabric.modmenu) {
		transitive = false
	}
	modLocalRuntime (fabric.modmenu) {
		transitive = false
	}
}

loom {
	mods {
		"${mod_id}" {
			// Tell Loom about each source set used by your mod here. This ensures that your mod's classes are properly transformed by Loader.
			sourceSet sourceSets.main
			sourceSet project(":Common").sourceSets.main
		}

		"${mod_id}_testmod" {
			sourceSet sourceSets.testmod
			sourceSet project(":Common").sourceSets.testmod
		}
	}
	if (project(":Common").file("src/main/resources/${mod_id}.accesswidener").exists()) {
		accessWidenerPath.set(project(":Common").file("src/main/resources/${mod_id}.accesswidener"))
	}
	mixin {
		defaultRefmapName.set("${mod_id}.refmap.json")
	}

	runs {
		client {
			client()
			setConfigName("Fabric Client")
			ideConfigGenerated(true)
			runDir("run")

			if (project.hasProperty('mc_uuid')) {
				programArg("--uuid=${project.findProperty('mc_uuid')}")
			}

			if (project.hasProperty('mc_username')) {
				programArg("--username=${project.findProperty('mc_username')}")
			}

			if (project.hasProperty('mc_java_agent_path')) {
				vmArg("-javaagent:${project.findProperty('mc_java_agent_path')}")
			}
		}

		testmodClient {
			client()
			setConfigName("Fabric Testmod Client")
			ideConfigGenerated(true)
			runDir("run/testmod")
			source(sourceSets.testmod)

			if (project.hasProperty('mc_uuid')) {
				programArg("--uuid=${project.findProperty('mc_uuid')}")
			}

			if (project.hasProperty('mc_username')) {
				programArg("--username=${project.findProperty('mc_username')}")
			}

			if (project.hasProperty('mc_java_agent_path')) {
				vmArg("-javaagent:${project.findProperty('mc_java_agent_path')}")
			}
		}

		server {
			server()
			setConfigName("Fabric Server")
			ideConfigGenerated(true)
			runDir("run/server")
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	source(project(":Common").sourceSets.main.allJava)
}

tasks.named("compileTestmodJava", JavaCompile).configure {
	source(project(":Common").sourceSets.testmod.allJava)
}

tasks.named("javadoc", Javadoc).configure {
	source(project(":Common").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
	from(project(":Common").sourceSets.main.allSource)
}

processResources {
	from project(":Common").sourceSets.main.resources
}

processTestmodResources {
	from project(":Common").sourceSets.testmod.resources
}
