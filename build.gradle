plugins {
	id "maven-publish"
	alias libs.plugins.quilt.loom
	alias libs.plugins.chenille
}

def ENV = System.getenv()
def buildTime = ENV.BUILD_TIME ?: new Date().format("yyyyMMddHHmmss")

// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
project.ext.javaVersion = 17

archivesBaseName = "sparkweave"
group = "dev.upcraft"

boolean isPreviewBuild = !ENV.TAG || ENV.TAG.matches(".+-.+")
def buildNumber = !ENV.TAG ? ("${ENV.BUILD_NUMBER ? "build.${ENV.BUILD_NUMBER}" : buildTime}-${libs.versions.minecraft.get()}") : ""
version = (ENV.TAG ?: "development") + ((isPreviewBuild && !ENV.TAG) ? "+${buildNumber}" : "")

println("Building ${project.name} ${version}")

//FIXME workaround for quilt-loom bug
project.configurations.configureEach {
	exclude(group: "net.fabricmc", module: "fabric-loader")
	exclude(group: "net.fabricmc.fabric-api")
}

chenille {
	javaVersion = project.ext.javaVersion
	configureTestmod {
		withBaseTestRuns()
		withDependencyConfiguration()
	}
	repositories {
		ladysnake()
		modrinth()
		terraformers()
	}
}

repositories {
	maven {
		name = "GeckoLib"
		url = "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven"
	}
	maven {
		name = "ParchmentMC"
		url = "https://maven.parchmentmc.org"
	}
	mavenLocal()
}

// All the dependencies are declared at gradle/libs.version.toml and referenced with "libs.<id>"
// See https://docs.gradle.org/current/userguide/platforms.html for information on how version catalogs work.
dependencies {
	minecraft libs.minecraft
	mappings(loom.layered {
		it.mappings variantOf(libs.quilt.mappings) { classifier 'intermediary-v2' }
		it.parchment("${libs.parchment.mappings.get()}@zip")
		it.officialMojangMappings { nameSyntheticMembers = false }
	})
	modImplementation libs.quilt.loader

	// QSL is not a complete API; You will need Quilted Fabric API to fill in the gaps.
	// Quilted Fabric API will automatically pull in the correct QSL version.
	modImplementation libs.quilted.fabric.api
	modLocalRuntime libs.quilted.fabric.api.deprecated

	modImplementation libs.midnightlib

	annotationProcessor libs.mixinextras
	modIncludeApi libs.mixinextras

	modLocalImplementation libs.emi
	modLocalRuntime libs.modmenu

	modLocalRuntime libs.lazydfu

	implementation libs.appdirs
	include libs.appdirs
}

processResources {
	inputs.property "version", version

	filesMatching("quilt.mod.json") {
		expand "version": version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release.set(project.ext.javaVersion)
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
	withSourcesJar()
	withJavadocJar()

	toolchain {
		languageVersion = JavaLanguageVersion.of(javaVersion)
		vendor = JvmVendorSpec.MICROSOFT
	}
}

// If you plan to use a different file for the license, don't forget to change the file name here!
jar {
	from(layout.projectDirectory) {
		include "LICENSE.md"
		rename { "LICENSE_${archivesBaseName}.md" }
	}

	manifest.mainAttributes(
            "Implementation-Title": project.archivesBaseName,
            "Implementation-Version": project.version,
            "Maven-Artifact": "${project.group.toLowerCase(Locale.ROOT)}:${project.archivesBaseName.toLowerCase(Locale.ROOT)}:${project.version}",
            "Built-On-Minecraft": libs.versions.minecraft.get(),
            "Built-On-Java": "${System.getProperty("java.vm.version")} (${System.getProperty("java.vm.vendor")})"
    )
}

// Configure the maven publication
publishing {
	publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
        if (ENV.MAVEN_UPLOAD_URL) {
            maven {
                url = ENV.MAVEN_UPLOAD_URL
                credentials {
                    username = ENV.MAVEN_UPLOAD_USERNAME
                    password = ENV.MAVEN_UPLOAD_PASSWORD
                }
            }
        }
    }
}
